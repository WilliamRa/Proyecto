{"ast":null,"code":"import _objectSpread from \"/home/william/workspace/prueba-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDbQRAJWLCQslRqh3DgMiBzXIZw4j4UiOM\",\n  authDomain: \"react-7b2a0.firebaseapp.com\",\n  databaseURL: \"https://react-7b2a0.firebaseio.com\",\n  projectId: \"react-7b2a0\",\n  storageBucket: \"\",\n  messagingSenderId: \"861680923827\",\n  appId: \"1:861680923827:web:24c9a031bb3f54a6\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst users = firebase.database().ref('users');\nconst post = firebase.database().ref('post');\nconst auth = firebase.auth();\nexport default class Firebase {\n  constructor() {\n    this.newPost = (message, id, name) => {\n      post.push({\n        message: message,\n        userID: id,\n        like: [],\n        username: name\n      });\n    };\n\n    this.getPost = callback => {\n      post.on('value', post => {\n        try {\n          const Post = post.val();\n          const key = Object.keys(Post);\n          const cleanArray = [];\n          key.map(keys => {\n            cleanArray.push(_objectSpread({}, Post[keys], {\n              id: keys\n            }));\n          });\n          callback(cleanArray);\n        } catch (err) {\n          callback([]);\n        }\n      });\n    };\n\n    this.registerUser = (values, cb) => {\n      auth.createUserWithEmailAndPassword(values.email, values.password).then(data => {\n        const user = {\n          name: values.username,\n          email: values.email,\n          id: data.user.uid\n        };\n        users.child(data.user.uid).set(_objectSpread({}, user));\n        cb();\n      }).catch(error => {\n        switch (error.code) {\n          case \"auth/email-already-in-use\":\n            alert(error.message);\n            break;\n\n          default:\n            break;\n        }\n      });\n    };\n\n    this.loginUser = (value, cb, callback) => {\n      auth.signInWithEmailAndPassword(value.email, value.password).then(data => {\n        users.child(data.user.uid).once('value').then(user => {\n          const dataUser = user.val();\n          callback(dataUser);\n          cb(user);\n          return user;\n        });\n      }).catch(error => {\n        switch (error.code) {\n          case \"auth/wrong-password\":\n            cb(error);\n            break;\n\n          case \"auth/user-not-found\":\n            cb(error);\n            break;\n\n          case \"auth/invalid-email\":\n            cb(error);\n            break;\n\n          default:\n            break;\n        }\n      });\n    };\n\n    this.deletePost = id => {\n      post.child(id).remove();\n    };\n\n    this.editPost = (message, id, userID, name) => {\n      firebase.database().ref('post/' + id).update({\n        message: message,\n        userID: userID,\n        username: name\n      });\n    };\n\n    this.likePost = (id, like, userID, cb) => {\n      if (!like) {\n        firebase.database().ref('post/' + id + '/like/').set([userID]);\n        cb(true);\n      } else {\n        const clean = new Array();\n        like.forEach(like => {\n          clean.push(like, userID);\n        });\n        firebase.database().ref('post/' + id + '/like/').set(clean);\n      }\n    };\n\n    this.disLikePost = (userID, like, id) => {\n      for (var i = 0; i < like.length; i++) {\n        if (like[i] === userID) {\n          firebase.database().ref('post/' + id + \"/like/\".concat(i)).remove();\n        }\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/william/workspace/prueba-react/src/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","users","database","ref","post","auth","Firebase","newPost","message","id","name","push","userID","like","username","getPost","callback","on","Post","val","key","Object","keys","cleanArray","map","err","registerUser","values","cb","createUserWithEmailAndPassword","email","password","then","data","user","uid","child","set","catch","error","code","alert","loginUser","value","signInWithEmailAndPassword","once","dataUser","deletePost","remove","editPost","update","likePost","clean","Array","forEach","disLikePost","i","length"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDbQRAJWLCQslRqh3DgMiBzXIZw4j4UiOM\",\n  authDomain: \"react-7b2a0.firebaseapp.com\",\n  databaseURL: \"https://react-7b2a0.firebaseio.com\",\n  projectId: \"react-7b2a0\",\n  storageBucket: \"\",\n  messagingSenderId: \"861680923827\",\n  appId: \"1:861680923827:web:24c9a031bb3f54a6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst users = firebase.database().ref('users');\nconst post = firebase.database().ref('post');\nconst auth = firebase.auth();\n\nexport default class Firebase {\n\n  newPost = (message, id, name) => {\n    post.push({\n      message: message,\n      userID: id,\n      like: [],\n      username: name\n    })\n  }\n\n  getPost = (callback) => {\n    post.on('value', (post) => {\n      try {\n        const Post = post.val();\n        const key = Object.keys(Post);\n        const cleanArray = []\n        key.map((keys) => {\n          cleanArray.push({\n            ...Post[keys], id: keys\n          })\n        })\n        callback(cleanArray)\n      } catch (err) {\n        callback([])\n      }\n    });\n  }\n\n  registerUser = (values, cb) => {\n    auth.createUserWithEmailAndPassword(values.email, values.password).then(\n      (data) => {\n        const user = {\n          name: values.username,\n          email: values.email,\n          id: data.user.uid\n        }\n        users.child(data.user.uid).set({\n          ...user,\n        })\n        cb();\n      }\n    ).catch(error => {\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n          alert(error.message)\n          break;\n        default:\n          break;\n      }\n    })\n  }\n\n  loginUser = (value, cb, callback) => {\n    auth.signInWithEmailAndPassword(value.email, value.password).then(data => {\n      users.child(data.user.uid).once('value')\n        .then(user => {\n          const dataUser = user.val()\n          callback(dataUser);\n          cb(user)\n          return user;\n        })\n    }).catch(error => {\n      switch (error.code) {\n        case \"auth/wrong-password\":\n          cb(error)\n          break;\n        case \"auth/user-not-found\": \n          cb(error)\n          break;\n        \n        case \"auth/invalid-email\":\n          cb(error)\n          break;\n          \n        default:\n          break;\n      }\n    });\n  };\n\n  deletePost = (id) => {\n    post.child(id).remove()\n  }\n\n  editPost = (message, id, userID, name) => {\n    firebase.database().ref('post/' + id).update({\n      message: message,\n      userID: userID,\n      username: name\n    })\n  }\n\n  likePost = (id, like, userID, cb) => {\n    if (!like) {\n      firebase.database().ref('post/' + id + '/like/').set([userID])\n      cb(true)\n    } else {\n      const clean = new Array();\n      like.forEach(like => {\n        clean.push(like, userID)\n      })\n      firebase.database().ref('post/' + id + '/like/').set(clean)\n    }\n  }\n\n  disLikePost = (userID, like, id) => {\n    for (var i = 0; i < like.length; i++) {\n      if (like[i] === userID) {\n        firebase.database().ref('post/' + id + `/like/${i}`).remove()\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}